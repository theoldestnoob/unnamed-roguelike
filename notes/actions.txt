=== Current dict-based actions ===

---Entity Actions---
{"message": message_string}
{"move": (entity, dx, dy)}
{"move_astar": (entity, target)}
{"melee": (entity, target)}
{"wait": int_time}
{"spawn_etheric": (entity, dest_x, dest_y)}
{"despawn_etheric": entity}
{"possess": (entity, target)}
{"unpossess": (entity, dest_x, dest_y)}
{"pickup": True}
{"item_added": item}
{"use_item": item}
{"consumed": (True|False)}
{"drop_item": item}
{"item_dropped": item}
{"targeting": item_entity}
{"cancel_target": True}
{"dead": entity}
{"xp": [entity, xp]}
{"level_up": [entity, ("hp"|"str"|"def")]}
{"equip": [entity, item]}
{"equipped": [entity, item]}
{"dequipped": [entity, item]}

---Player Actions---
{"exit": True}
{"fullscreen": True}
{"mousemotion": (x, y)}
{"msg_up": True}
{"msg_down": True}
{"show_inventory": True}
{"drop_inventory": True}
{"take_stairs": True}
{"show_character_screen": True}
{"omnivis": True}
{"switch_char": True}
{"map_gen": True}
{"graph_gen": True}
{"test": True}



=== New namedtuple-based actions ===

Action(Actions.MESSAGE, source=curr_entity, args=msg)
Action(Actions.MOVE, source=curr_entity, target=curr_entity, args=(dx, dy))
Action(Actions.MELEE, source=curr_entity, target=target)
Action(Actions.WAIT, source=curr_entity, target=curr_entity, args=100)
Action(Actions.SPAWN_ETHERIC, source=curr_entity, args=(dest_x, dest_y))
Action(Actions.DESPAWN_ETHERIC, source=curr_entity, target=curr_entity)
Action(Actions.POSSESS, source=curr_entity, target=target)
Action(Actions.UNPOSSESS, source=curr_entity, target=curr_entity, args=(dest_x, dest_y))
Action(Actions.USE_ITEM, source=curr_entity, target=curr_entity, args=item)
Action(Actions.DROP_ITEM, source=curr_entity, target=curr_entity, args=item)
Action(Actions.SHOW_INVENTORY, source=curr_entity, target=curr_entity)
Action(Actions.DROP_INVENTORY, source=curr_entity, target=curr_entity)
Action(Actions.LEVEL_UP, source=curr_entity, target=curr_entity, args=choice)
Action(Actions.SHOW_CHARACTER_SCREEN, source=curr_entity, target=curr_entity)
Action(Actions.EXIT)
Action(Actions.FULLSCREEN)
Action(Actions.OMNIVIS)
Action(Actions.SWITCH_CHAR, source=curr_entity)
Action(Actions.MAP_GEN)
Action(Actions.GRAPH_GEN)
Action(Actions.TEST)
Action(Actions.MSG_UP, source=curr_entity)
Action(Actions.MSG_DOWN, source=curr_entity)
Action(Actions.PICKUP, source=curr_entity, target=curr_entity)
Action(Action(Actions.CANCEL_TARGET, source=curr_entity))
Action(Actions.TAKE_STAIRS, source=curr_entity, target=curr_entity)
Action(Actions.MOUSEMOTION, args=(x, y))

Action(Actions.DEAD, source=self.owner)
Action(Actions.XP, source=self.owner, args=self.xp) <--- returned from fighter.attack
Action(Actions.XP, source=xp_source, target=xp_target, args=xp_args) <--- adjusted to include xp target

Action(Actions.ITEM_ADDED, source=self.owner, args=item)

Action(Actions.EQUIP, source=self.owner, target=item_entity)
Action(Actions.DEQUIPPED, source=self.owner, target=equippable_entity)
Action(Actions.EQUIPPED, source=self.owner, target=equippable_entity)
								 
Action(Actions.TARGETING, source=self.owner, args=item_entity)

Action(Actions.CONSUMED) <--- returned from item_function
Action(Actions.CONSUMED, source=self.owner, target=item_entity) <--- adjusted to include user, item
Action(Actions.ITEM_USED, source=self.owner, target=item_entity)

Action(Actions.ITEM_DROPPED, source=self.owner, target=item)



